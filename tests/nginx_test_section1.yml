---
# CIS NGINX Benchmark v1.0.0
#
# 1 Initial Setup
# 1.1 Installation
# 1.1.1 Ensure NGINX is installed (Scored)

package:
  nginx:
    title: 1.1.1 Ensure NGINX is installed (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 1.1.1
    # required attributes
    installed: true

# 2 Basic Configuration
# 2.1 Minimize NGINX Modules

command:
  # 2.1.2 Ensure HTTP WebDAV module is not installed (Scored)
  http_dav_module:
    title: 2.1.2 Ensure HTTP WebDAV module is not installed (Scored)
    meta:
      webserver: 2
      proxy: 2
      loadbalancer: 2
      CIS_ID: 2.1.2
      Remediation: To remove the http_dav_module, recompile nginx from source without the --with-http_dav_module flag.
    exit-status: 1
    exec: nginx -V 2>&1 | grep 'http_dav_module'

  # 2.1.3 Ensure modules with gzip functionality are disabled (Scored)
  http_gzip_module:
    title: 2.1.3 Ensure modules with gzip functionality are disabled (Scored)
    meta:
      webserver: 2
      proxy: 2
      loadbalancer: 2
      CIS_ID: 2.1.3
      Remediation: In order to disable the http_gzip_module, nginx must be recompiled from source. This can be accomplished using the below command in the folder you used during your original compilation. This must be done without the --with-http_gzip_static_module configuration directive.
    exit-status: 0
    exec: nginx -V 2>&1 | grep 'http_gzip_module\|http_gzip_static_module'

  # 2.1.4 Ensure the autoindex module is disabled (Scored)
  autoindex:
    title: 2.1.4 Ensure the autoindex module is disabled (Scored)
    meta:
      webserver: 1
      CIS_ID: 2.1.4
      Remediation: Set the value for all autoindex directives to off, or remove those directives.
    exit-status: 1
    exec: egrep -i '^\s*autoindex\s+' /etc/nginx/nginx.conf
  autoindex:
    title: 2.1.4 Ensure the autoindex module is disabled (Scored)
    meta:
      webserver: 1
      CIS_ID: 2.1.4
      Remediation: Set the value for all autoindex directives to off, or remove those directives.
    exit-status:
      or:
      - 1
      - 2
    exec: egrep -i '^\s*autoindex\s+' /etc/nginx/conf.d/*

  # 2.2.2 Ensure the NGINX service account is locked (Scored)
  password_locked:
    title: 2.2.2 Ensure the NGINX service account is locked (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 2.2.2
      Remediation: Use the passwd command to lock the nginx service account -> passwd -l <nginx_user>
    exit-status: 0
    exec: bash ./2.2.2.sh

  # 2.2.3 Ensure the NGINX service account has an invalid shell (Scored)
  invalid_shell:
    title: 2.2.3 Ensure the NGINX service account has an invalid shell (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 2.2.3
      Remediation: Change the login shell for the nginx account to /sbin/nologin by using the following command -> chsh -s /sbin/nologin nginx
    exit-status: 0
    exec: USER=$(grep "^user[^;]*;" /etc/nginx/nginx.conf | awk '{print $2}' | sed 's/;//g'); grep $USER /etc/passwd | grep 'nologin\|false'

# 2.3 Permissions and Ownership
  # 2.3.1 Ensure NGINX directories and files are owned by root (Scored)
  owned_by_root:
    title: 2.3.1 Ensure NGINX directories and files are owned by root (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 2.3.1
      Remediation: Run the following command to ensure ownership and group ownership is set to root -> chown -R root:root /etc/nginx
    exit-status: 0
    exec: stat /etc/nginx | grep root | grep 755

  # 2.3.2 Ensure access to NGINX directories and files is restricted (Scored)
  access_restricted:
    title: 2.3.2 Ensure access to NGINX directories is restricted (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 2.3.2
      Remediation: To set permissions to least privilege on the nginx configuration files, issue these command -> find /etc/nginx -type d | xargs chmod 750
    exit-status: 1
    exec: find /etc/nginx -type d | xargs ls -ld | grep 'root root' | grep -v 'drwxr\-x'
  access_restricted:
    title: 2.3.2 Ensure access to NGINX files is restricted (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 2.3.2
      Remediation: To set permissions to least privilege on the nginx configuration files, issue these command -> find /etc/nginx -type f | xargs chmod 640
    exit-status: 1
    exec: find /etc/nginx -type f | xargs ls -l | grep 'root root' | grep -v '\-rw\-r\-\-'

  # 2.3.3 Ensure the NGINX process ID (PID) file is secured (Scored)
  pid_secured:
    title: 2.3.3 Ensure the NGINX process ID (PID) file is secured (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 2.3.3
      Remediation: If the PID file is not owned by root, issue this command -> chown root:root /var/run/nginx.pid   If the PID file has permissions greater than 644, issue this command -> chown 644 /var/run/nginx.pid
    exit-status: 0
    exec: ls -l /var/run/nginx.pid | grep 'root root'

# 2.4 Network Configuration
  # 2.4.3 Ensure keepalive_timeout is 10 seconds or less, but not 0 (Scored)
  keepalive_timeout:
    title: 2.4.3 Ensure keepalive_timeout is 10 seconds or less, but not 0 (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 2.4.3
      Remediation: Find the HTTP or server block of your nginx configuration, and add the keepalive_timeout directive. Set it to 10 seconds or less, but not 0.
    exit-status: 0
    exec: bash ./2.4.3.sh

  # 2.4.4 Ensure send_timeout is set to 10 seconds or less, but not 0 (Scored)
  send_timeout:
    title: 2.4.4 Ensure send_timeout is set to 10 seconds or less, but not 0 (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 2.4.4
      Remediation: Find the HTTP or server block of your nginx configuration, and add the send_timeout directive. Set it to 10 seconds or less, but not 0.
    exit-status: 0
    exec: bash ./2.4.4.sh

# 2.5 Information Disclosure
  # 2.5.1 Ensure server_tokens directive is set to `off` (Scored)
  server_tokens:
    title: 2.5.1 Ensure server_tokens directive is set to `off` (Scored)
    meta:
      webserver: 1
      CIS_ID: 2.5.1
      Remediation: To disable the server_tokens directive, set it to off inside a server block in your nginx.conf.
    exit-status: 0
    exec: grep -ri '^server_tokens' /etc/nginx | grep 'off;'

  # 2.5.2 Ensure default error and index.html pages do not reference NGINX
  reference_nginx:
    title: 2.5.2 Ensure default error and index.html pages do not reference NGINX
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 2.5.2
      Remediation: Edit /usr/share/nginx/html/index.html and usr/share/nginx/html/50x.html and remove any lines that reference NGINX.
    exit-status: 1
    exec: grep -i nginx /usr/share/nginx/html/index.html
  reference_nginx:
    title: 2.5.2 Ensure default error and index.html pages do not reference NGINX
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 2.5.2
      Remediation: Edit /usr/share/nginx/html/index.html and usr/share/nginx/html/50x.html and remove any lines that reference NGINX.
    exit-status: 1
    exec: grep -i nginx /usr/share/nginx/html/50x.html

  # 2.5.4 Ensure the NGINX reverse proxy does not enable information disclosure (Scored)
  ## TODO

# 3 Logging
  # 3.2 Ensure access logging is enabled (Scored)
  ## TODO

  # 3.3 Ensure error logging is enabled and set to the info logging level (Scored)
  error_log:
    title: 3.3 Ensure error logging is enabled and set to the info logging level (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 3.3
      Remediation: Edit /etc/nginx/nginx.conf so the error_log directive is present and not commented out. The error_log should be configured to the logging location of your choice and info logging level.
    exit-status: 0
    exec: grep error_log /etc/nginx/nginx.conf | grep info

  # 3.4 Ensure log files are rotated (Scored)
  ## TODO

  # 3.7 Ensure proxies pass source IP information (Scored)
  ## TODO

# 4 Encryption
# 4.1 TLS / SSL Configuration
  # 4.1.1 Ensure HTTP is redirected to HTTPS (Scored)
  ## REVIEW
  redirect_https:
    title: 4.1.1 Ensure HTTP is redirected to HTTPS (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 4.1.1
      Remediation: Edit your web server or proxy configuration file to redirect all unencrypted listening ports, such as port 80, using a redirection through the return directive -> return 301 https://$host$request_uri;
    exit-status: 0
    exec: curl -s -o /dev/null -w "%{http_code}" http://`hostname` | grep 301

  # 4.1.3 Ensure private key permissions are restricted (Scored)
  private_key_permissions:
    title: 4.1.1 Ensure HTTP is redirected to HTTPS (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 4.1.3
      Remediation: Ensure private key permissions are set to 400.
    exit-status: 0
    exec: KEY=$(grep -ri "ssl_certificate_key" /etc/nginx/nginx.conf | awk '{print $2}' | sed 's/;//g'); ls -lH $KEY | grep '\-r\-\-\-\-\-\-\-\-'

  # 4.1.4 Ensure only modern TLS protocols are used (Scored)
  modern_TLS_protocols:
    title: 4.1.4 Ensure only modern TLS protocols are used (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 4.1.4
      Remediation: Only modern TLS protocols should be enabled in NGINX for all client connections and upstream connections. Removing legacy TLS and SSL protocols (SSL 3.0, TLS 1.0 and 1.1), and enabling emerging and stable TLS protocols (TLS 1.2 and TLS 1.3), ensures users are able to take advantage of strong security capabilities and protects them from insecure legacy protocols.
    exit-status: 0
    exec: grep -ir ssl_protocol /etc/nginx | grep 'TLSv1.2\|TLSv1.3' | grep -v 'TLSv1.1' | grep 'TLSv1' | grep 'SSL'

  # 4.1.5 Disable weak ciphers (Scored)
  ## REVIEW grep -ir ssl_ciphers /etc/nginx/ grep -ir proxy_ssl_ciphers /etc/nginx to match required
  weak_ciphers:
    title: 4.1.5 Disable weak ciphers (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 4.1.5
      Remediation: The ssl_ciphers directive should be used to configure the available ciphers on your web server, and the proxy_ssl_ciphers directive should be used to configure the available ciphers for your proxy. Weak ciphers should be disabled based on your company's policy or an industry best practice compliance profile.
    exit-status: 0
    exec: grep -ir ssl_prefer_server_ciphers /etc/nginx | grep 'on;'

  # 4.1.6 Ensure custom Diffie-Hellman parameters are used (Scored)
  dhparam:
    title: 4.1.6 Ensure custom Diffie-Hellman parameters are used (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 4.1.6
      Remediation: Generate strong DHE (Ephemeral Diffie-Hellman) parameters.
    exit-status: 0
    exec: grep ssl_dhparam /etc/nginx/nginx.conf

  # 4.1.7 Ensure Online Certificate Status Protocol (OCSP) stapling is enabled (Scored)
  ocsp_stapling:
    title: 4.1.7 Ensure Online Certificate Status Protocol (OCSP) stapling is enabled (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 4.1.7
      Remediation: Enable OCSP stapling.
    exit-status: 0
    exec: grep -ir ssl_stapling /etc/nginx | grep 'on;'

  # 4.1.8 Ensure HTTP Strict Transport Security (HSTS) is enabled (Scored)
  hsts:
    title: 4.1.8 Ensure HTTP Strict Transport Security (HSTS) is enabled (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 4.1.8
      Remediation: Ensure the below snippet of code can be found in your server configuration for your proxy or web server. This will ensure the HSTS header is set with a validity period of six months, or 15768000 seconds.
    exit-status: 0
    exec: grep -ir Strict-Transport-Security /etc/nginx

  # 4.1.10 Ensure upstream server traffic is authenticated with a client certificate (Scored)
  client_certificate:
    title: 4.1.10 Ensure upstream server traffic is authenticated with a client certificate (Scored)
    meta:
      proxy: 1
      loadbalancer: 1
      CIS_ID: 4.1.10
      Remediation: You must create a client certificate to be authenticated against and have it signed. Once you have a signed certificate, place the certificate in a location of your choice.
    exit-status: 0
    exec: grep -ir proxy_ssl_certificate /etc/nginx

  # 4.1.11 Ensure the upstream traffic server certificate is trusted (Not Scored)
  server_certificate:
    title: 4.1.11 Ensure the upstream traffic server certificate is trusted (Not Scored)
    meta:
      proxy: 2
      loadbalancer: 2
      CIS_ID: 4.1.11
      Remediation: Obtain the full certificate chain of the upstream server in .pem format. Then reference that file in the location block as part of the proxy_ssl_trusted_certificate directive.
    exit-status: 0
    exec: grep -ir proxy_ssl_trusted_certificate /etc/nginx
  server_certificate:
    title: 4.1.11 Ensure the upstream traffic server certificate is trusted (Not Scored)
    meta:
      proxy: 2
      loadbalancer: 2
      CIS_ID: 4.1.11
      Remediation: Obtain the full certificate chain of the upstream server in .pem format. Then reference that file in the location block as part of the proxy_ssl_trusted_certificate directive.
    exit-status: 0
    exec: grep -ir proxy_ssl_verify /etc/nginx

  # 4.1.13 Ensure session resumption is disabled to enable perfect forward security (Scored)
  ssl_session_tickets:
    title: 4.1.13 Ensure session resumption is disabled to enable perfect forward security (Scored)
    meta:
      webserver: 2
      proxy: 2
      loadbalancer: 2
      CIS_ID: 4.1.13
      Remediation: Turn off the ssl_session_tickets directive as part of any server block in your nginx configuration.
    exit-status: 0
    exec: grep -ir ssl_session_tickets /etc/nginx | grep 'off;'

# 5 Request Filtering and Restrictions
# 5.2 Request Limits
  # 5.2.1 Ensure timeout values for reading the client header and body are set correctly (Scored)
  client_body_timeout:
    title: 5.2.1 Ensure timeout values for reading the client header and body are set correctly (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 5.2.1
      Remediation: Find the HTTP or server block of your nginx configuration and add the client_body_timeout directive set to the configuration. The below example sets the timeouts to 10 seconds.
    exit-status: 0
    exec: grep -ir client_body_timeout /etc/nginx | grep '10;'
  client_header_timeout:
    title: 5.2.1 Ensure timeout values for reading the client header and body are set correctly (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 5.2.1
      Remediation: Find the HTTP or server block of your nginx configuration and add the client_header_timeout directive set to the configuration. The below example sets the timeouts to 10 seconds.
    exit-status: 0
    exec: grep -ir client_header_timeout /etc/nginx | grep '10;'

  # 5.2.2 Ensure the maximum request body size is set correctly (Scored)
  client_body_timeout:
    title: 5.2.2 Ensure the maximum request body size is set correctly (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 5.2.2
      Remediation: Find the HTTP or server block of your nginx configuration and add the client_max_body_size set to 100K in this block.
    exit-status: 0
    exec: grep -ir client_max_body_size /etc/nginx | grep '100K;'

  # 5.2.3 Ensure the maximum buffer size for URIs is defined (Scored)
  large_client_header_buffers:
    title: 5.2.3 Ensure the maximum buffer size for URIs is defined (Scored)
    meta:
      webserver: 1
      proxy: 1
      loadbalancer: 1
      CIS_ID: 5.2.3
      Remediation: Open your nginx.conf file and locate your server or HTTP blocks. This may be added to the HTTP block for all configurations or the server block for more specific configurations to meet your needs -> large_client_header_buffers 2 1k
    exit-status: 0
    exec: grep -ir 'large_client_header_buffers 2 1k' /etc/nginx/ | grep '100K;'

# 5.3 Browser Security
  # 5.3.1 Ensure X-Frame-Options header is configured and enabled (Scored)
  X-Frame-Options:
    title: 5.3.1 Ensure X-Frame-Options header is configured and enabled (Scored)
    meta:
      webserver: 1
      CIS_ID: 5.3.1
      Remediation: Add the line to your server blocks in your nginx configuration. The policy should be configured to meet your organization's needs -> add_header X-Frame-Options "SAMEORIGIN";
    exit-status: 0
    exec: grep -ir X-Frame-Options /etc/nginx | grep 'SAMEORIGIN'

  # 5.3.2 Ensure X-Content-Type-Options header is configured and enabled (Scored)
  X-Content-Type-Options:
    title: 5.3.2 Ensure X-Content-Type-Options header is configured and enabled (Scored)
    meta:
      webserver: 1
      CIS_ID: 5.3.2
      Remediation: Open the nginx configuration file that contains your server blocks. Add the following line into your server block to add X-Content-Type-Options header and direct your user agent to not sniff content types -> add_header X-Content-Type-Options "nosniff";
    exit-status: 0
    exec: grep -ir X-Content-Type-Options /etc/nginx | grep 'noosniff'

  # 5.3.3 Ensure the X-XSS-Protection Header is enabled and configured properly (Scored)
  X-XSS-Protection:
    title: 5.3.3 Ensure the X-XSS-Protection Header is enabled and configured properly (Scored)
    meta:
      webserver: 1
      CIS_ID: 5.3.3
      Remediation: Open your nginx configuration file that contains your server blocks. Add the below line into your server block to add Content-Security-Policy and direct your user agent to block reflected cross-site scripting -> add_header X-Xss-Protection "1; mode=block";
    exit-status: 0
    exec: grep -ir 'X-Xss-Protection' /etc/nginx | grep '1; mode=block'
